// Code generated by protoc-gen-go.
// source: zvirt_domain.proto
// DO NOT EDIT!

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	zvirt_domain.proto

It has these top-level messages:
	DomStateRequest
	DomStateResponse
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// domain state
type DomainState int32

const (
	DomainState_VIR_DOMAIN_NOSTATE     DomainState = 0
	DomainState_VIR_DOMAIN_RUNNING     DomainState = 1
	DomainState_VIR_DOMAIN_BLOCKED     DomainState = 2
	DomainState_VIR_DOMAIN_PAUSED      DomainState = 3
	DomainState_VIR_DOMAIN_SHUTDOWN    DomainState = 4
	DomainState_VIR_DOMAIN_SHUTOFF     DomainState = 5
	DomainState_VIR_DOMAIN_CRASHED     DomainState = 6
	DomainState_VIR_DOMAIN_PMSUSPENDED DomainState = 7
	DomainState_VIR_DOMAIN_LAST        DomainState = 8
)

var DomainState_name = map[int32]string{
	0: "VIR_DOMAIN_NOSTATE",
	1: "VIR_DOMAIN_RUNNING",
	2: "VIR_DOMAIN_BLOCKED",
	3: "VIR_DOMAIN_PAUSED",
	4: "VIR_DOMAIN_SHUTDOWN",
	5: "VIR_DOMAIN_SHUTOFF",
	6: "VIR_DOMAIN_CRASHED",
	7: "VIR_DOMAIN_PMSUSPENDED",
	8: "VIR_DOMAIN_LAST",
}
var DomainState_value = map[string]int32{
	"VIR_DOMAIN_NOSTATE":     0,
	"VIR_DOMAIN_RUNNING":     1,
	"VIR_DOMAIN_BLOCKED":     2,
	"VIR_DOMAIN_PAUSED":      3,
	"VIR_DOMAIN_SHUTDOWN":    4,
	"VIR_DOMAIN_SHUTOFF":     5,
	"VIR_DOMAIN_CRASHED":     6,
	"VIR_DOMAIN_PMSUSPENDED": 7,
	"VIR_DOMAIN_LAST":        8,
}

func (x DomainState) String() string {
	return proto.EnumName(DomainState_name, int32(x))
}
func (DomainState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// domain stat request
type DomStateRequest struct {
	VmUuid string `protobuf:"bytes,1,opt,name=vm_uuid,json=vmUuid" json:"vm_uuid,omitempty"`
}

func (m *DomStateRequest) Reset()                    { *m = DomStateRequest{} }
func (m *DomStateRequest) String() string            { return proto.CompactTextString(m) }
func (*DomStateRequest) ProtoMessage()               {}
func (*DomStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DomStateRequest) GetVmUuid() string {
	if m != nil {
		return m.VmUuid
	}
	return ""
}

type DomStateResponse struct {
	State DomainState `protobuf:"varint,1,opt,name=state,enum=protocol.DomainState" json:"state,omitempty"`
}

func (m *DomStateResponse) Reset()                    { *m = DomStateResponse{} }
func (m *DomStateResponse) String() string            { return proto.CompactTextString(m) }
func (*DomStateResponse) ProtoMessage()               {}
func (*DomStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DomStateResponse) GetState() DomainState {
	if m != nil {
		return m.State
	}
	return DomainState_VIR_DOMAIN_NOSTATE
}

func init() {
	proto.RegisterType((*DomStateRequest)(nil), "protocol.DomStateRequest")
	proto.RegisterType((*DomStateResponse)(nil), "protocol.DomStateResponse")
	proto.RegisterEnum("protocol.DomainState", DomainState_name, DomainState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ZvirtDomainService service

type ZvirtDomainServiceClient interface {
	DomState(ctx context.Context, in *DomStateRequest, opts ...grpc.CallOption) (*DomStateResponse, error)
}

type zvirtDomainServiceClient struct {
	cc *grpc.ClientConn
}

func NewZvirtDomainServiceClient(cc *grpc.ClientConn) ZvirtDomainServiceClient {
	return &zvirtDomainServiceClient{cc}
}

func (c *zvirtDomainServiceClient) DomState(ctx context.Context, in *DomStateRequest, opts ...grpc.CallOption) (*DomStateResponse, error) {
	out := new(DomStateResponse)
	err := grpc.Invoke(ctx, "/protocol.ZvirtDomainService/DomState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ZvirtDomainService service

type ZvirtDomainServiceServer interface {
	DomState(context.Context, *DomStateRequest) (*DomStateResponse, error)
}

func RegisterZvirtDomainServiceServer(s *grpc.Server, srv ZvirtDomainServiceServer) {
	s.RegisterService(&_ZvirtDomainService_serviceDesc, srv)
}

func _ZvirtDomainService_DomState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZvirtDomainServiceServer).DomState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ZvirtDomainService/DomState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZvirtDomainServiceServer).DomState(ctx, req.(*DomStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZvirtDomainService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.ZvirtDomainService",
	HandlerType: (*ZvirtDomainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DomState",
			Handler:    _ZvirtDomainService_DomState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zvirt_domain.proto",
}

func init() { proto.RegisterFile("zvirt_domain.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0x86, 0xe9, 0xf7, 0xc9, 0x8f, 0xc7, 0x04, 0xc6, 0x43, 0x00, 0x65, 0x65, 0x88, 0x0b, 0x83,
	0x09, 0x0b, 0xbc, 0x00, 0x53, 0x98, 0x41, 0x88, 0x30, 0x6d, 0x3a, 0xad, 0x46, 0x37, 0x0d, 0xc2,
	0x2c, 0x9a, 0x58, 0x06, 0xe9, 0xcf, 0xc2, 0x0b, 0xf6, 0x3a, 0x4c, 0x8b, 0xe8, 0xd8, 0xb8, 0x6a,
	0xf2, 0xbc, 0x6f, 0xde, 0x93, 0x3e, 0x03, 0xf8, 0x9e, 0x06, 0xbb, 0xd8, 0x5f, 0xab, 0x70, 0x19,
	0x6c, 0x06, 0xdb, 0x9d, 0x8a, 0x15, 0xd6, 0xf2, 0xcf, 0x4a, 0xbd, 0xf6, 0xfa, 0xd0, 0xa0, 0x2a,
	0x14, 0xf1, 0x32, 0x96, 0x8e, 0x7c, 0x4b, 0x64, 0x14, 0x63, 0x07, 0xaa, 0x69, 0xe8, 0x27, 0x49,
	0xb0, 0x3e, 0x33, 0x2e, 0x8c, 0xab, 0x63, 0xa7, 0x92, 0x86, 0x5e, 0x12, 0xac, 0x7b, 0xb7, 0x40,
	0x7e, 0xba, 0xd1, 0x56, 0x6d, 0x22, 0x89, 0xd7, 0x50, 0x8e, 0x32, 0x90, 0x57, 0xeb, 0xc3, 0xd6,
	0xe0, 0xb0, 0x3c, 0xa0, 0xf9, 0xc1, 0x7d, 0x7b, 0xdf, 0xe9, 0x7f, 0x18, 0x70, 0xa2, 0x61, 0x6c,
	0x03, 0x3e, 0xcc, 0x1c, 0x9f, 0x5a, 0x0b, 0x73, 0xc6, 0x7d, 0x6e, 0x09, 0xd7, 0x74, 0x19, 0x29,
	0x15, 0xb8, 0xe3, 0x71, 0x3e, 0xe3, 0x77, 0xc4, 0x28, 0xf0, 0xd1, 0xdc, 0x1a, 0xdf, 0x33, 0x4a,
	0xfe, 0x61, 0x0b, 0x4e, 0x35, 0x6e, 0x9b, 0x9e, 0x60, 0x94, 0xfc, 0xc7, 0x0e, 0x34, 0x35, 0x2c,
	0xa6, 0x9e, 0x4b, 0xad, 0x47, 0x4e, 0x8e, 0x0a, 0x3b, 0x59, 0x60, 0x4d, 0x26, 0xa4, 0x5c, 0xe0,
	0x63, 0xc7, 0x14, 0x53, 0x46, 0x49, 0x05, 0xbb, 0xd0, 0xd6, 0xf7, 0x17, 0xc2, 0x13, 0x36, 0xe3,
	0x94, 0x51, 0x52, 0xc5, 0x26, 0x34, 0xb4, 0x6c, 0x6e, 0x0a, 0x97, 0xd4, 0x86, 0x4f, 0x80, 0xcf,
	0x99, 0xf5, 0xaf, 0x9f, 0x95, 0xbb, 0x34, 0x58, 0x49, 0x1c, 0x43, 0xed, 0xe0, 0x0f, 0xcf, 0x7f,
	0x89, 0xd2, 0xfd, 0x77, 0xbb, 0x7f, 0x45, 0x7b, 0xdd, 0xbd, 0xd2, 0xe8, 0x12, 0xea, 0xf9, 0x83,
	0x7e, 0x97, 0x46, 0x44, 0x3b, 0x65, 0x67, 0xd0, 0x36, 0x5e, 0x2a, 0x79, 0x7a, 0xf3, 0x19, 0x00,
	0x00, 0xff, 0xff, 0x37, 0xfc, 0x49, 0xba, 0xfd, 0x01, 0x00, 0x00,
}

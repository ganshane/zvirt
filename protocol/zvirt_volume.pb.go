// Code generated by protoc-gen-go.
// source: zvirt_volume.proto
// DO NOT EDIT!

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VolumeDefineRequest struct {
	PoolUuid string `protobuf:"bytes,1,opt,name=pool_uuid,json=poolUuid" json:"pool_uuid,omitempty"`
	Xml      string `protobuf:"bytes,2,opt,name=xml" json:"xml,omitempty"`
}

func (m *VolumeDefineRequest) Reset()                    { *m = VolumeDefineRequest{} }
func (m *VolumeDefineRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeDefineRequest) ProtoMessage()               {}
func (*VolumeDefineRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *VolumeDefineRequest) GetPoolUuid() string {
	if m != nil {
		return m.PoolUuid
	}
	return ""
}

func (m *VolumeDefineRequest) GetXml() string {
	if m != nil {
		return m.Xml
	}
	return ""
}

type VolumeRequest struct {
	PoolUuid string `protobuf:"bytes,1,opt,name=pool_uuid,json=poolUuid" json:"pool_uuid,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *VolumeRequest) Reset()                    { *m = VolumeRequest{} }
func (m *VolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeRequest) ProtoMessage()               {}
func (*VolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *VolumeRequest) GetPoolUuid() string {
	if m != nil {
		return m.PoolUuid
	}
	return ""
}

func (m *VolumeRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type VolumeInfo struct {
	Key        string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Capacity   uint64 `protobuf:"varint,2,opt,name=capacity" json:"capacity,omitempty"`
	Allocation uint64 `protobuf:"varint,3,opt,name=allocation" json:"allocation,omitempty"`
}

func (m *VolumeInfo) Reset()                    { *m = VolumeInfo{} }
func (m *VolumeInfo) String() string            { return proto.CompactTextString(m) }
func (*VolumeInfo) ProtoMessage()               {}
func (*VolumeInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *VolumeInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *VolumeInfo) GetCapacity() uint64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *VolumeInfo) GetAllocation() uint64 {
	if m != nil {
		return m.Allocation
	}
	return 0
}

func init() {
	proto.RegisterType((*VolumeDefineRequest)(nil), "protocol.VolumeDefineRequest")
	proto.RegisterType((*VolumeRequest)(nil), "protocol.VolumeRequest")
	proto.RegisterType((*VolumeInfo)(nil), "protocol.VolumeInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ZvirtVolumeService service

type ZvirtVolumeServiceClient interface {
	Create(ctx context.Context, in *VolumeDefineRequest, opts ...grpc.CallOption) (*VolumeInfo, error)
	Info(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*VolumeInfo, error)
	Delete(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*VolumeInfo, error)
}

type zvirtVolumeServiceClient struct {
	cc *grpc.ClientConn
}

func NewZvirtVolumeServiceClient(cc *grpc.ClientConn) ZvirtVolumeServiceClient {
	return &zvirtVolumeServiceClient{cc}
}

func (c *zvirtVolumeServiceClient) Create(ctx context.Context, in *VolumeDefineRequest, opts ...grpc.CallOption) (*VolumeInfo, error) {
	out := new(VolumeInfo)
	err := grpc.Invoke(ctx, "/protocol.ZvirtVolumeService/create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zvirtVolumeServiceClient) Info(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*VolumeInfo, error) {
	out := new(VolumeInfo)
	err := grpc.Invoke(ctx, "/protocol.ZvirtVolumeService/info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zvirtVolumeServiceClient) Delete(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*VolumeInfo, error) {
	out := new(VolumeInfo)
	err := grpc.Invoke(ctx, "/protocol.ZvirtVolumeService/delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ZvirtVolumeService service

type ZvirtVolumeServiceServer interface {
	Create(context.Context, *VolumeDefineRequest) (*VolumeInfo, error)
	Info(context.Context, *VolumeRequest) (*VolumeInfo, error)
	Delete(context.Context, *VolumeRequest) (*VolumeInfo, error)
}

func RegisterZvirtVolumeServiceServer(s *grpc.Server, srv ZvirtVolumeServiceServer) {
	s.RegisterService(&_ZvirtVolumeService_serviceDesc, srv)
}

func _ZvirtVolumeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeDefineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZvirtVolumeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ZvirtVolumeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZvirtVolumeServiceServer).Create(ctx, req.(*VolumeDefineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZvirtVolumeService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZvirtVolumeServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ZvirtVolumeService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZvirtVolumeServiceServer).Info(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZvirtVolumeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZvirtVolumeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ZvirtVolumeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZvirtVolumeServiceServer).Delete(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZvirtVolumeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.ZvirtVolumeService",
	HandlerType: (*ZvirtVolumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _ZvirtVolumeService_Create_Handler,
		},
		{
			MethodName: "info",
			Handler:    _ZvirtVolumeService_Info_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _ZvirtVolumeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zvirt_volume.proto",
}

func init() { proto.RegisterFile("zvirt_volume.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x91, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x8d, 0x1b, 0xa3, 0x7b, 0xa0, 0x8c, 0xa7, 0x60, 0x99, 0x28, 0x52, 0x3c, 0x78, 0xea,
	0x41, 0x0f, 0xe2, 0x45, 0x61, 0xec, 0xe2, 0x6d, 0x54, 0xf4, 0xb0, 0xcb, 0x88, 0xe9, 0x1b, 0x84,
	0x65, 0x7d, 0xb5, 0x26, 0xc5, 0xf9, 0x0d, 0xfd, 0x56, 0x92, 0x94, 0x96, 0x31, 0x04, 0xf5, 0xd4,
	0xe6, 0xff, 0xe3, 0x97, 0xbc, 0xfc, 0x03, 0xf8, 0x59, 0xeb, 0xca, 0x2e, 0x6a, 0x36, 0x6e, 0x4d,
	0x69, 0x59, 0xb1, 0x65, 0x8c, 0xc2, 0x47, 0xb1, 0x49, 0xa6, 0x70, 0xf4, 0x12, 0xc8, 0x94, 0x96,
	0xba, 0xa0, 0x8c, 0xde, 0x1c, 0xbd, 0x5b, 0x3c, 0x85, 0x61, 0xc9, 0x6c, 0x16, 0xce, 0xe9, 0x3c,
	0x16, 0x17, 0xe2, 0x6a, 0x98, 0x45, 0x3e, 0x78, 0x76, 0x3a, 0xc7, 0x11, 0xf4, 0x3e, 0xd6, 0x26,
	0xde, 0x0f, 0xb1, 0xff, 0x4d, 0xee, 0xe1, 0xa0, 0xd9, 0xe5, 0xaf, 0xfe, 0x8a, 0x36, 0xad, 0xbf,
	0xa2, 0x4d, 0x32, 0x07, 0x68, 0xfc, 0xc7, 0x62, 0xc9, 0x2d, 0x17, 0x1d, 0xc7, 0x31, 0x44, 0x4a,
	0x96, 0x52, 0x69, 0xdb, 0x68, 0xfd, 0xac, 0x5b, 0xe3, 0x39, 0x80, 0x34, 0x86, 0x95, 0xb4, 0x9a,
	0x8b, 0xb8, 0x17, 0xe8, 0x56, 0x72, 0xfd, 0x25, 0x00, 0xe7, 0xbe, 0x82, 0xe6, 0x84, 0x27, 0xaa,
	0x6a, 0xad, 0x08, 0x1f, 0x60, 0xa0, 0x2a, 0x92, 0x96, 0xf0, 0x2c, 0x6d, 0xdb, 0x48, 0x7f, 0xa8,
	0x62, 0x7c, 0xbc, 0x8b, 0xfd, 0x8c, 0xc9, 0x1e, 0xde, 0x42, 0x5f, 0xfb, 0x69, 0x4f, 0x76, 0xf9,
	0x6f, 0xe2, 0x1d, 0x0c, 0x72, 0x32, 0x64, 0xe9, 0xdf, 0xea, 0xe4, 0x12, 0x0e, 0xc3, 0x6b, 0x76,
	0x78, 0x32, 0xda, 0xba, 0xda, 0xcc, 0x87, 0x33, 0xf1, 0x3a, 0x08, 0xf4, 0xe6, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0xae, 0xbc, 0xdc, 0x3c, 0xfa, 0x01, 0x00, 0x00,
}
